% Given a connected graph and the selection of input nodes, tell whether its structurally controllable.%% INPUTS: A connection graph(adj) (all edges have weight 1) and the selection of input nodes(set), e.g. [1 2 3 5]% OUTPUTS: iconSC (1 for structurally controllable and 0 for not)%% Note: only for undirected graph.% GB: last updated, Jan 21, 2019function iconSC = tellSCornot(adjG, inputNode)    iconSC = 0;  % Examine the inputs and measure the size  [x_1,y_1] = size(adjG);    [x_2,y_2] = size(inputNode);  x_2 = max(x_2,y_2);  x_tot = 2 * x_1 + x_2;  x_tot1 = x_1 + x_2;  x_tot2 = x_2;    a = 1 : x_1;  if x_2 == 0    error(' inputNode is empty. ');  end  b = (x_tot1 + 1) : x_tot;  c = 1 : x_tot;    inputNode = sort(inputNode); % Sort the inputNode vector.  if isConnected(adjG) == 0    error(' The graph entered is not connected.');  end    % Build the flow-based auxiliary bipartite graph where input nodes are shown.  auxGadj = zeros(x_tot,x_tot);  auxGSTadj = zeros(x_tot + 2 , x_tot + 2);  auxGadj(a,b) = adjG;  for i = 1 : x_2    auxGadj(x_1 + i,inputNode(i) + x_tot1) = 1;  end  auxGSTadj((1 + c), (1 + c)) = auxGadj;  auxGSTadj(1, (1+(1:x_tot1))) = ones(1, x_tot1);  auxGSTadj((x_tot1 + 2) : (x_tot + 1) , x_tot + 2) = ones(x_tot2,1);    % Use flow theory to determine whether this graph is structurally controllable.  [valf,adjMf] = findMaxflow(auxGSTadj);  if valf == x_1    iconSC = 1;  end      