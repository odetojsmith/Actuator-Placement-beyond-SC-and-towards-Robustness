%adjf = [0 5 2 0 5; 0 0 0 0 5; 0 0 0 4 0; 0 0 2 0 4; 0 0 0 2 0];%adjcf = [0 5 5 0 5; 0 0 0 0 5; 0 0 0 5 0; 0 0 0 0 5; 0 5 0 0 0];%[a,b]=AugmentShortestPath(adjf,adjcf);%##adjcf = [0 3 6 0 0 0;%##         0 0 0 0 5 0;%##         0 0 0 8 0 0;%%##         0 0 0 0 0 2;%##         0 0 0 0 0 0];%##[valf, adjMf] = findMaxflow(adjcf)%##adjG = [0 1 1; 1 0 0; 1 0 0];%##inputNode = [2];%##tellSCornot(adjG, inputNode)% pkg load controlclear alladdpath('./NetworkAnalysisTool');% Prelimary information%##adjG = [-0.05 -0.5 -0.3 -0.6; %##        0.1 -0.05 0 0; %##        0.1 0 -0.05 0;%##        0.1 0 0 -0.05];load adjDegree.mat%adjGO = randomGraph(10,0.4);%adjG = giantComponent(adjGO);K = 2;                  % Cardinality constraints  ep = 1e-12;              % EpsilonT = 1;                  % Integration termination timeDiv = 10000;              % Integration resolution (division of the total time)switchM = 1;% Measure the graph [x_1,y_1] = size(adjG);adjG_topo = zeros(x_1,y_1);if x_1 ~= y_1   error('Adj not square!');endif isConnected(abs(adjG)) == 0    error(' The graph entered is not connected.');end% % Give the topological information for the graph.% for i = 1 : x_1%   for j = 1 : y_1%     if adjG(i,j) != 0%       adjG_topo(i,j) = 1;%     end%   end% end% % % Determine whether the cardinality constraint is adequate.% CardEnoicon = isCardEnough(adjG_topo,K,x_1);% if CardEnoicon == 0%   error(' The allowed cardinality is too small! ');% endA = ListAllCombination(8,23);[rowA, columnA] = size(A);VectorE = zeros(rowA,1);for i = 1 : rowA  VectorE(i) = obj2(T,Div,adjG,A(i,:),ep);endminValue = min(VectorE);[RowMin] = find(VectorE == minValue);A(RowMin,:)