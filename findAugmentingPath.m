% Given line flow and line capacity, find an augmenting path from the last point to the first.% Used for Edmonds-Karp Algorithm%% INPUTS: Line flow(adj), line capacity(adj)% OUTPUTS: An augmenting path%% GB: last updated, Jan 19, 2019function Pat = findAugmentingPath(adjf,adjcf)  % Examine the inputs  [x_1,y_1] = size(adjf);           [x_2,y_2] = size(adjcf);    if x_1 ~= x_2 || y_1 ~= y_2 || x_1 ~= y_1       disp('Unmatched line flow and line capacity');      while 1        1 + 1;      end    end    % Initialization  Pat = zeros(x_1+1,1);  lowPoint = x_1;  Pat(1) = x_1;    % Build the deficient subgraph and find the augmenting path  adjA = deficientSubgraph(adjf,adjcf);  adjL = adj2adjL(adjA);  l = BFS(adjL,1,x_1);  adjAPat = adjL2adj(l);    % Write the path in a reverse sequence  if isequal(adjAPat(:,x_1),zeros(x_1,1)) ~=0 % No augmenting paths    Pat = NaN;  else    for i = 1:(x_1-1)      for j = 1:x_1        if adjAPat(j,lowPoint) ~=  0          Pat(i+1) = j;          lowPoint = j;          break;        end      end      if Pat(i+1) == 1        Pat(i+2) = -1;        break;      end    end  end