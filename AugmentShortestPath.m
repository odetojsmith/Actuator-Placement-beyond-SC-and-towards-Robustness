% Given line flow and line capacity, find an augmenting path and augment it.%% INPUTS: Line flow(adj), line capacity(adj)% OUTPUTS: a augmented line flow(adj)%% GB: last updated, Jan 20, 2019function [maxReach, newadjf] = AugmentShortestPath(adjf,adjcf)    maxReach = 0;  % Show the augmenting path.  Pat = findAugmentingPath(adjf,adjcf);  Pat_copy = Pat;    if isnan(Pat) == 1    maxReach = 1;    newadjf = adjf;  else    p = length(Pat);    for i = 1 : p      if Pat(i) == -1        p = i;        break;      end    end    for i = 1 : (p-1)      Pat(i) = Pat_copy(p-i);    end      % Merge the co-exsiting forward/reverse flow.    % Only one of forward/reverse flow is positive.    for i = 1 : (p-2)      if adjf(Pat(p-i) , Pat(p-i-1)) > adjf(Pat(p-i-1) , Pat(p-i))        adjf(Pat(p-i) , Pat(p-i-1)) = adjf(Pat(p-i) , Pat(p-i-1)) - adjf(Pat(p-i-1) , Pat(p-i));        adjf(Pat(p-i-1) , Pat(p-i)) = 0;      else        adjf(Pat(p-i-1) , Pat(p-i)) = adjf(Pat(p-i-1) , Pat(p-i)) - adjf(Pat(p-i) , Pat(p-i-1));        adjf(Pat(p-i) , Pat(p-i-1)) = 0;      end    end      % Find the change needed to maximize the flow through the augmenting path.    Pinc = zeros(1,p-2); % Initialization of the path increment vector.    for i = 1 : (p-2)      if adjf(Pat(p-i) , Pat(p-i-1)) > 0         Pinc(p-i-1) = adjf(Pat(p-i) , Pat(p-i-1)) ;      else        Pinc(p-i-1) = adjcf(Pat(p-i-1) , Pat(p-i)) - adjf(Pat(p-i-1) , Pat(p-i));      end    end    Pincmin = min(Pinc);      % Implement this change to every edge within the augmenting path.    for i = 1 : (p-2)      if adjf(Pat(p-i) , Pat(p-i-1)) > 0         adjf(Pat(p-i) , Pat(p-i-1)) =  adjf(Pat(p-i) , Pat(p-i-1)) - Pincmin;      else        adjf(Pat(p-i-1) , Pat(p-i)) = adjf(Pat(p-i-1) , Pat(p-i)) + Pincmin;      end    end      newadjf = adjf;    maxReach = 0;    end    